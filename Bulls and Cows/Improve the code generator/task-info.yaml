type: edu
files:
- name: src/bullscows/Main.java
  visible: true
  text: |
    package bullscows;
    import java.util.Scanner;  // Import the Scanner class

    public class Main {
        public static void main(String[] args) {
            // initial values
            int numberOfCows = 0;
            int numberOfBulls = 0;
            int numberOfTurns = 1;
            int correctValue = 0;

            Scanner scanner = new Scanner(System.in);
            // generate number
            generateRandomNumber randomComputerNumber = new generateRandomNumber();
            String[] correctValueArray = randomComputerNumber.getNumber();

            // convert array to string
            String displayValue = "";
            for(int i = 0; i < correctValueArray.length; i++){
                displayValue += correctValueArray[i];
            }

            try {
                correctValue = Integer.parseInt(displayValue);
            } catch(Exception e){
                System.out.println("");
            }
            // start the game
            while(numberOfBulls != displayValue.length()) {
                System.out.printf("Turn %d", numberOfTurns);
                System.out.println("");
                numberOfTurns++;
                System.out.println("Input a value:");
                String[] userInput = scanner.nextLine().split("");

                // calculate the number of bulls & cows
                numberOfBulls = howManyBulls.numberOfBulls(userInput, correctValueArray);
                numberOfCows = howManyCows.numberOfCows(userInput, correctValueArray);

                //print the result
                if (numberOfBulls == displayValue.length()) {
                    System.out.printf("Grade: %d bulls.", numberOfBulls);
                    System.out.println("");
                    System.out.println("Congratulations! You guessed the secret code.");
                } else if (numberOfCows > 0 && numberOfBulls > 0) {
                    System.out.printf("Grade: %d bull(s) and %d cow(s).", numberOfBulls, numberOfCows);
                    System.out.println("");
                } else if (numberOfCows == 0 && numberOfBulls == 0) {
                    System.out.printf("Grade: None.");
                    System.out.println("");
                } else if (numberOfCows > 0 && numberOfBulls == 0) {
                    System.out.printf("Grade: %d cow(s).", numberOfCows);
                    System.out.println("");
                } else if (numberOfCows == 0 && numberOfBulls > 0) {
                    System.out.printf("Grade: %d bull(s).", numberOfBulls);
                    System.out.println("");
                }
            }
        }
    }
  learner_created: false
- name: src/bullscows/generateRandomNumber.java
  visible: true
  text: |+
    package bullscows;

    import java.util.*;

    public class generateRandomNumber {
        Scanner scanInt = new Scanner(System.in);

        public String[] getNumber(){
            System.out.println("Please, enter the secret code's length:");
            Integer userNumber = scanInt.nextInt();

            // initial values
            String[] randomNum = new String[userNumber];
            String[] answer = new String[userNumber];
            Integer acc = 0;

            // logic for all
            if(userNumber <= 9) {
                while(acc < userNumber) {
                    // create the answer
                    answer = new String[userNumber];

                    // created storage value
                    List<String> randomNumList = new ArrayList<>();
                    randomNumList.addAll(Arrays.asList(randomNum));

                    // generate random as long
                    String str = Long.toString(System.nanoTime());
                    List<String> generatedNumber = new ArrayList<>();
                    generatedNumber.addAll(Arrays.asList(str.split("")));
                    Collections.reverse(generatedNumber);

                    // create the random
                    for (int i = 0; i <= generatedNumber.size()-1; i++) {
                        if (!randomNumList.contains(generatedNumber.get(i)) && acc <= userNumber-1) {
                            answer[acc] = generatedNumber.get(i);
                            randomNumList.add(generatedNumber.get(i));
                            acc++;
                        }
                    }

                    // check the number doesn't start with a 0
                    if(answer[0].equals("0")) acc = 0;

                    /*
                    String displayValue = "";
                    for(int i = 0; i < answer.length; i++){
                        displayValue += answer[i];
                    }
                    //print statement
                    System.out.println("The random secret number is " + displayValue);
                     */
                }
            } else {
                System.out.printf("Error: can't generate a secret number with a length of %d because there aren't enough unique digits.", userNumber);
            }

            return answer;
        }

    }


    /*
    You can generate a secret code by iterating over the
    pseudoRandomNumber in the reverse order and adding unique digits.
    If the pseudoRandomNumber lacks the required number of unique digits,
    call System.nanoTime()
    again and try to generate the secret code again until you get a satisfactory result.

    */

  learner_created: false
- name: src/bullscows/howManyBulls.java
  visible: true
  text: |
    package bullscows;

    public class howManyBulls {
        public static int numberOfBulls(String[] userInput, String[] correctValue){
            int numberOfBulls = 0;
            for (int i = 0; i< userInput.length; i++) {
                if(userInput[i].equals(correctValue[i])){
                    numberOfBulls++;
                }
            }
            return numberOfBulls;
        }
    }
  learner_created: false
- name: src/bullscows/howManyCows.java
  visible: true
  text: |
    package bullscows;

    public class howManyCows {
        public static int numberOfCows(String[] userInput, String[] correctValue){
            int numberOfCows = 0;
            for (String i: userInput) {
                for (String j: correctValue) {
                    if(i.equals(j)){
                        numberOfCows++;
                        break;
                    }
                }
            }
            return numberOfCows;
        }
    }
  learner_created: false
- name: test/BullsCowsTest.java
  visible: false
  text: |-
    import bullscows.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class BullsCowsTest extends StageTest<String> {

        // base test with 1 digit number
        @DynamicTestingMethod
        CheckResult test1() {
            TestedProgram main = new TestedProgram();
            main.start();

            String output;
            int gotAnswer = 0;
            output = main.execute("1");

            for (int i = 0; i <= 9; i++) {
                if (main.isFinished()) {
                    break; // if game has stopped, stop cycle and start check of results;
                }
                output = main.execute(Integer.toString(i));
                int[] result = getNumOfBullsAndCows(output);
                if (result[0] == 1) {
                    gotAnswer++; // if got a bull, count for an amount of answers
                }
            }

            // if we got less or more than 1 answer, the program work is incorrect
            if (gotAnswer != 1) {
                return CheckResult.wrong("The game has no answer or more than one. ");
            }

            return CheckResult.correct();
        }

        // standard bulls and cows game
        @DynamicTestingMethod
        CheckResult test2() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("4");

            Integer[] usedNums = getUsedNumbers(main, 4);
            boolean check = getPermutations(main, 4, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // max length we can check
        @DynamicTestingMethod
        CheckResult test3() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("6");

            Integer[] usedNums = getUsedNumbers(main, 6);
            boolean check = getPermutations(main, 6, usedNums);

            if (!check && main.isFinished()) {
                return CheckResult.wrong("The program has finished before the answer was found");
            }

            if (!check) {
                return CheckResult.wrong("The program tried all possible " +
                        "combinations of digits and hasn't found the answer.");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The program didn't finish after " +
                        "the answer was found");
            }

            return CheckResult.correct();
        }

        // length limit check
        @DynamicTestingMethod
        CheckResult test4() {
            TestedProgram main = new TestedProgram();
            main.start();
            String output = main.execute("11");

            if (output.toLowerCase().contains("error")) {
                return CheckResult.correct();
            } else {
                return CheckResult.wrong("An error message expected with input \"11\"");
            }
        }

        Integer[] getUsedNumbers(TestedProgram main, int length) {
            Integer[] nums = new Integer[length];
            int[] result;

            int index = 0;
            String output;
            String input;

            for (int i = 0; i < 10; i++) {
                input = new String(new char[length]).replace("\0", Integer.toString(i));
                output = main.execute(input);
                result = getNumOfBullsAndCows(output);

                if (result[0] > 1) {
                    throw new WrongAnswer("Seems like " +
                            "the calculation of bulls isn't right. " +
                            "For the guess \"" + input + "\" there can be 1 bull at max.");
                }

                if (result[0] == 1) {
                    nums[index++] = i;
                }
                if (index == length) {
                    break;
                }
            }

            if (index != length) {
                throw new WrongAnswer(
                        "Output should contain " + length + " bulls " +
                        "summarized as every option was tried. Found: " + index
                );
            }

            return nums;
        }


        // permutations one by one
        public boolean getPermutations(TestedProgram main, int length, Integer[] elements) {
            int[] indexes = new int[length];
            for (int i = 0; i < length; i++) {
                indexes[i] = 0;
            }

            String output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
            int[] result = getNumOfBullsAndCows(output);
            if (result[0] == length) {
                return true;
            }

            int i = 0;
            while (i < length) {
                if (indexes[i] < i) {
                    swap(elements, i % 2 == 0 ? 0 : indexes[i], i);
                    output = main.execute(Arrays.toString(elements).replaceAll("\\[|\\]|, ", ""));
                    result = getNumOfBullsAndCows(output);
                    if (result[0] == length) {
                        return true;
                    }
                    indexes[i]++;
                    i = 0;
                } else {
                    indexes[i] = 0;
                    i++;
                }
            }
            return false;
        }

        private static void swap(Integer[] input, int a, int b) {
            int tmp = input[a];
            input[a] = input[b];
            input[b] = tmp;
        }


        // get number of bulls and cows from user program's output
        int[] getNumOfBullsAndCows(String userString) {
            Matcher nonePattern = Pattern.compile("\\b[nN]one\\b").matcher(userString);
            Matcher cowsPattern = Pattern.compile("\\b\\d [cC]ow").matcher(userString);
            Matcher bullsPattern = Pattern.compile("\\b\\d [bB]ull").matcher(userString);
            Pattern oneNumPattern = Pattern.compile("\\d");

            if (nonePattern.find()) {
                return new int[]{0, 0};
            }

            int[] ans = {0, 0};
            boolean found = false;

            if (bullsPattern.find()) {
                String temp = bullsPattern.group();
                Matcher oneNumBulls = oneNumPattern.matcher(temp);
                oneNumBulls.find();
                ans[0] = Integer.parseInt(oneNumBulls.group());
                found = true;
            }

            if (cowsPattern.find()) {
                String temp = cowsPattern.group();
                Matcher oneNumCows = oneNumPattern.matcher(temp);
                oneNumCows.find();
                ans[1] = Integer.parseInt(oneNumCows.group());
                found = true;
            }

            if (!found) {
                throw new WrongAnswer(
                        "Cannot find number of bulls or number of cows or None after the input."
                );
            }

            return ans;
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5433#comment
status: Solved
record: 4
